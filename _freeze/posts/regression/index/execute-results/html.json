{
  "hash": "d8a9f0f17fad9726c64b132d01619746",
  "result": {
    "markdown": "---\ntitle: \"Linear and nonlinear regression\"\nauthor: \"Youwei Chen\"\ndate: \"2023-11-29\"\ncategories: [regression, scatterplot, machine learning, housing price prediction]\n---\n\n### 1. Introduction:\n\nThis blog aims to use **linear regression** model to predict housing prices in CA. It will perform feature selection based on the correlation of housing attributes. The **linear regression** model is later trained using the selected features. It also includes a **scatterplot** to assess the model's performance and a **best-fit line** to show accuracy.\n\n### 2. Import libraries:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n```\n:::\n\n\n### 3. Open the csv file:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nca_df = pd.read_csv('california-housing.csv')\nprint(ca_df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n0    -122.23     37.88                  41          880           129.0   \n1    -122.22     37.86                  21         7099          1106.0   \n2    -122.24     37.85                  52         1467           190.0   \n3    -122.25     37.85                  52         1274           235.0   \n4    -122.25     37.85                  52         1627           280.0   \n\n   population  households  median_income ocean_proximity  house_value  \n0         322         126         8.3252        NEAR BAY       452600  \n1        2401        1138         8.3014        NEAR BAY       358500  \n2         496         177         7.2574        NEAR BAY       352100  \n3         558         219         5.6431        NEAR BAY       341300  \n4         565         259         3.8462        NEAR BAY       342200  \n```\n:::\n:::\n\n\n### 4. Correlation Feature selection:\n\nThe code calculates the correlation coefficients of the housing attributes. It then selects the attributes that meet the threshold requirement.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ncorrelation_with_price = ca_df.drop('ocean_proximity', axis=1).corr()['house_value']\n\nselected_features = correlation_with_price[(correlation_with_price >= 0.1) | (correlation_with_price <= -0.1)].index\n\nprint(f'Selected features: {selected_features}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSelected features: Index(['latitude', 'housing_median_age', 'total_rooms', 'median_income',\n       'house_value'],\n      dtype='object')\n```\n:::\n:::\n\n\n### 5.Build the linear regression model from the selected correlated features:\n\nThe linear regression model takes selected features and **house_value** to train. The model is able to predict house values, and they are evaluated using **Mean Squared Error (MSE)** and **R-squared metrics**.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nx = ca_df[selected_features].drop('house_value', axis=1)\ny = ca_df['house_value']\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=30)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\nprint(f'Mean Squared Error: {mse}\\nR-squared: {r2}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 6907727072.880442\nR-squared: 0.4991305863315274\n```\n:::\n:::\n\n\n### 6. Scatterplot to assess the performance of the regression model:\n\nThe scatterplot is used to visualize the actual vs. predicted housing values from the regression model. The best fit red line is also plotted on the scatter plot.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nslope, intercept = np.polyfit(y_test, y_pred, 1)\nbest_fit_line = np.poly1d([slope, intercept])\n\nplt.figure(figsize=(8, 6))\nplt.scatter(y_test, y_pred)\nplt.plot(y_test, best_fit_line(y_test), 'r-', lw=2)\nplt.xlabel('Actual house value')\nplt.ylabel('Predicted house value')\nplt.title('Actual vs Predicted House Values')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=693 height=523}\n:::\n:::\n\n\n### 7. Predicting the house price with the regression model:\n\nIn this case, the new house has features with **latitude** 37.85, **housing_median age** 50, **total_rooms**: 2200, **median_income**: 2.6059\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# [latitude, housing_median_age, total_rooms, median_income]\nnew_house = pd.DataFrame([[37.85, 50, 2200, 2.6059]], columns=X_train.columns)\npredicted_price = model.predict(new_house)\nprint(\"Predicted Price: \", predicted_price[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted Price:  183161.94654197228\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}